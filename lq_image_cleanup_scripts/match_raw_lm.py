import os
import json
import torch
import argparse
import numpy as np
from tqdm import tqdm
from chamferdist import ChamferDistance

def config_parser():
    parser = argparse.ArgumentParser(description='This script removes the wrong campose images from the dataset.json file.')
    parser.add_argument('--raw_json', type=str, default='/data5/chence/FFHQ/FFHQ/ffhq-dataset-v2.json', help='The json file provided by authors.')
    parser.add_argument('--our_json', type=str, default='/data5/chence/FFHQ/FFHQ/meta_1-7.json',help='The json file generated by ourselves')
    # parser.add_argument('--filter_view', type=str, default='back', choices=['back', 'front'], help='The view to be filtered.')
    return parser.parse_args()

args = config_parser()
cfd = ChamferDistance()
with open(args.raw_json, 'r') as f:
    json_origin = json.load(f)
with open(args.our_json, 'r') as f:
    json_ours = json.load(f)
origin_lm = {}
for image, image_meta in tqdm(json_origin.items()):
    img_path = image_meta["in_the_wild"]["file_path"].split('/')
    del img_path[1]
    img_path = '/'.join(img_path)
    origin_lm[img_path] = torch.Tensor(image_meta["in_the_wild"]["face_landmarks"])
ours_lm = {}
for image_path, image_meta in tqdm(json_ours.items()):
    ours_lm[image_path] = torch.Tensor(image_meta["in_the_wild"]["face_landmarks_ours"])
pass_count = 0